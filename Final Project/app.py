# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PnqsJmWugAn4HBJtGvgO4Rz1HsHw4lXO
"""


import pickle
import numpy as np
from flask import Flask, request, jsonify, render_template, send_from_directory



app = Flask(__name__)


# Load the binary classification model
with open(r"C:\Users\Samriddha\OneDrive\Desktop\msc@cmi\cmi sem 4\Applied ML\Final Project\model_binary.pkl", 'rb') as f:
    model_binary = pickle.load(f)

# Load the multi-class classification model
with open(r"C:\Users\Samriddha\OneDrive\Desktop\msc@cmi\cmi sem 4\Applied ML\Final Project\model_multi.pkl", 'rb') as f:
    model_multi = pickle.load(f)



@app.route('/')
def index():
    return render_template('index4.html')  # Assuming you have an index.html file for your homepage

@app.route('/favicon.ico')
def favicon():
    return send_from_directory(app.root_path, 'favicon.ico', mimetype='image/vnd.microsoft.icon')

@app.route('/predict', methods=['POST'])
def predict():
    try:
        # # Parse form data
        # type = str(request.form.get('type'))
        # print('Type:', type)  # Add this line for debugging
        # air_temp = float(request.form.get('air_temp'))
        # print('Air Temp:', air_temp)  # Add this line for debugging        
        # process_temp = float(request.form.get('process_temp'))
        # print('Process Temp:', process_temp)  # Add this line for debugging
        # rotational_speed = float(request.form.get('rotational_speed'))
        # print('Rotational Speed:', rotational_speed)  # Add this line for debugging
        # torque = float(request.form.get('torque'))
        # print('Torque:', torque)  # Add this line for debugging
        # tool_wear = float(request.form.get('tool_wear'))
        # print('Tool Wear:', tool_wear)  # Add this line for debugging

        # Parse JSON data from request body
        data = request.json

        # Extract form fields from JSON data
        type = str(data.get('type'))
        print('Type:', type)
        air_temp = float(data.get('air_temp'))
        print('Air Temp:', air_temp)
        process_temp = float(data.get('process_temp'))
        print('Process Temp:', process_temp)
        rotational_speed = float(data.get('rotational_speed'))
        print('Rotational Speed:', rotational_speed)
        torque = float(data.get('torque'))
        print('Torque:', torque)
        tool_wear = float(data.get('tool_wear'))
        print('Tool Wear:', tool_wear)



        

        #Required dictionaries
        type_dict = {'L': 0, 'M': 1, 'H': 2}
        classification_dict={0:'No Failure',
                    1:'Failure'}
        reverse_cause_dict = {0: 'No Failure',
                     1: 'Power Failure',
                     2: 'Overstrain Failure',
                     3: 'Heat Dissipation Failure',
                     4: 'Tool Wear Failure'}
        
        #Convert the type variable into the appropriate format
        type = type_dict[type.upper()]

        # Prepare data for prediction
        data = [[type, air_temp, process_temp, rotational_speed, torque, tool_wear]]  # Modify as per your model input format
        
        # Perform predictions
        binary_prediction = model_binary.predict(data)
        multi_prediction = model_multi.predict(data)

        

        #Get the actual outputs
        predicted_failure_binary=classification_dict[binary_prediction[0]]
        predicted_failure_multi = reverse_cause_dict[multi_prediction[0]]



        # max_index1 = np.argmax(binary_prediction)
        # max_index2 = np.argmax(multi_prediction)

        # binary_list=['No failure','Failure']

        return jsonify({'binary_prediction': predicted_failure_binary, 'multi_prediction': predicted_failure_multi})
    except Exception as e:
        return jsonify({'error': str(e)})

if __name__ == '__main__':
    app.run(debug=True)


